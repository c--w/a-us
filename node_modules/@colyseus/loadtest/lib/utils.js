"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.throttle = exports.debounce = exports.elapsedTime = exports.formatBytes = void 0;
function formatBytes(bytes) {
    if (bytes < 1024) {
        return `${bytes} b`;
    }
    else if (bytes < Math.pow(1024, 2)) {
        return `${(bytes / 1024).toFixed(2)} kb`;
    }
    else if (bytes < Math.pow(1024, 4)) {
        return `${(bytes / 1024 / 1024).toFixed(2)} MB`;
    }
}
exports.formatBytes = formatBytes;
function elapsedTime(inputSeconds) {
    const days = Math.floor(inputSeconds / (60 * 60 * 24));
    const hours = Math.floor((inputSeconds % (60 * 60 * 24)) / (60 * 60));
    const minutes = Math.floor(((inputSeconds % (60 * 60 * 24)) % (60 * 60)) / 60);
    const seconds = Math.floor(((inputSeconds % (60 * 60 * 24)) % (60 * 60)) % 60);
    let ddhhmmss = '';
    if (days > 0) {
        ddhhmmss += days + ' day ';
    }
    if (hours > 0) {
        ddhhmmss += hours + ' hour ';
    }
    if (minutes > 0) {
        ddhhmmss += minutes + ' minutes ';
    }
    if (seconds > 0) {
        ddhhmmss += seconds + ' seconds ';
    }
    return ddhhmmss || "...";
}
exports.elapsedTime = elapsedTime;
function debounce(cb, wait = 100) {
    let h = 0;
    let callable = (...args) => {
        clearTimeout(h);
        h = setTimeout(() => cb(...args), wait);
    };
    return callable;
}
exports.debounce = debounce;
function throttle(func, waitFor) {
    const now = () => new Date().getTime();
    const resetStartTime = () => startTime = now();
    let timeout;
    let startTime = now() - waitFor;
    return (...args) => new Promise((resolve) => {
        const timeLeft = (startTime + waitFor) - now();
        if (timeout) {
            clearTimeout(timeout);
        }
        if (startTime + waitFor <= now()) {
            resetStartTime();
            resolve(func(...args));
        }
        else {
            timeout = setTimeout(() => {
                resetStartTime();
                resolve(func(...args));
            }, timeLeft);
        }
    });
}
exports.throttle = throttle;
