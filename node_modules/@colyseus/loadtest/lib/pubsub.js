"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.publish = exports.subscribe = exports.processMasterMessage = exports.registerProcess = void 0;
const cluster = __importStar(require("cluster"));
let processesById = {};
function masterHandleIncomingMessage(processId, message) {
    if (!processMasterMessage(message)) {
        return;
    }
    // send result back to worker
    processesById[processId].send(message);
}
function workerHandleIncomingMessage(message) {
    if (message.topic === "memshared") {
        message = message.data;
    }
    if (!message || !commands[message.cmd]) {
        return;
    }
    if (message.messageId) {
        store.consume(message);
    }
    else if (message.pubsub) {
        commands[message.cmd].apply(undefined, message.args);
    }
}
if (cluster.isMaster) {
    // Setup existing workers
    Object.keys(cluster.workers).forEach((workerId) => {
        registerProcess(cluster.workers[workerId].process);
    });
    // Listen for new workers to setup
    cluster.on("fork", (worker) => registerProcess(worker.process));
    // Be notified when worker processes die.
    cluster.on('exit', function (worker, code, signal) {
        delete processesById[worker.process.pid];
    });
}
else {
    process.on("message", workerHandleIncomingMessage);
}
function registerProcess(childProcess) {
    processesById[childProcess.pid] = childProcess;
    childProcess.on("message", (message) => masterHandleIncomingMessage(childProcess.pid, message));
}
exports.registerProcess = registerProcess;
function processMasterMessage(message) {
    if (!message || !commands[message.cmd]) {
        return false;
    }
    // run command on master process
    try {
        message.result = commands[message.cmd].apply(undefined, message.args);
    }
    catch (e) {
        message.error = e.message;
    }
    // delete irrelevant data to send back to the worker
    delete message['args'];
    return true;
}
exports.processMasterMessage = processMasterMessage;
function subscribe(type, callback) {
}
exports.subscribe = subscribe;
function publish(type, message) {
    process.send({ type, message });
}
exports.publish = publish;
